defn [memoized (f: Function)] {
  cache: cast Map[Tuple, Any] {:}
  fn {
    get_or_set cache[_all] [call f _all]
  }
}

;;defn memoized[F: Function](f: F) {
;;  cache: new_map[F.args, F.result]()
;;  defn newfun(spread F.args) [get_or_set cache _all [call f _all]]
;;  newfun
;;}

static our_memoize: tmpl {
  call_expr [name_expr "set_to", exprs[0], call_expr [name_expr "memoized", exprs[0]]]
}

defn [nth_fibonacci (n: Int) (returns Int)] {
  if [< n 2] 1 [sum [collect (decr n, decr n) nth_fibonacci]]
}

our_memoize nth_fibonacci

assert_is 165580141 [nth_fibonacci 40]