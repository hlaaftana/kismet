;; recursion
defn [foo (a: Int) (returns Int)] {
  if [< a 5] [foo [+ a 1]] a
}

assert_is 5 [foo 1]

;; path syntax
assert_is [1, 2, 3].[0] 1
assert "aa".<=("ab")

;; ??
dive {
  defn [`.property` x y] [cast Map x].[y]
  defn [`.property=` x y z] [cast Map x].[y]: z
  a: null
  assert_is [?? a.b.c] null
  a: {: "b": null}
  assert_is [?? a.b.c] null
  a.b: {: "c": null}
  assert_is [?? a.b.c] null
  a.b.c: 3
  assert_is [?? a.b.c] 3
}

;; double each
assert_is [let
  (result l: [], each i: [1, 2], each j: [3, 4])
  [add l (i, j)]] [(1, 3), (1, 4), (2, 3), (2, 4)]

;; parameter
dive {
  static T: [parameter_type]
  parametrize List[T] List[Int32]
  static [assert_is [unparam T] Int32]
}

dive {
  static T: [parameter_type Number]
  static U: [parameter_type]
  parametrize Tuple[Tuple[T, U], Int32] Tuple[Tuple[Int, String], Int32]
  static [assert_is [unparam T] Int]
  static [assert_is [unparam U] String]
}

;; colon syntax
dive {
a:
3
b:
  3

  assert_is a b 3
}

;; calling strings / numbers
dive {
  assert_is ["abc" "def"] "abcdef"
  a: 10
  assert_is (3a) 30
}

;; raw strings
dive {
  assert_is [match "a.b.c.d.e.f" regex"(.)\.(.)"] [("a.b", ["a", "b"]), ("c.d", ["c", "d"]), ("e.f", ["e", "f"])]
}

;; overloading over any type
dive {
  a: 3
  a: true
  incr a
  assert_is (prefer_type a Boolean, prefer_type a Int) (true, 4)
}