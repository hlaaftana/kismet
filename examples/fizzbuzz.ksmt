defn [fizzbuzz_imperative (n: Int)] {
  let (result x: "", each it: range 1 n) {
    if (d3: divs? it 3) (add x "Fizz")
    if (d5: divs? it 5) (add x "Buzz")
    unless (or d3 d5) (add x (string it))
    if (is_not? it n) (add x "\n")
  }
}

defn [fizzbuzz_functional (n: Int)] {
  |> [range 1 n] {
    collect [fn (i: Int) {
      [case
      [divs? i 15] "FizzBuzz"
      [divs? i 3] "Fizz"
      [divs? i 5] "Buzz"
      [string i]]
    }]
    join "\n"
  }
}

(defn fizzbuzz_weirdo(n: Int)
  (join (let (result l: [], each i: range 1 100)
    (add l (i, "Fizz", "Buzz", "FizzBuzz").[
      (reduce (0, 5, 3) (fn (a, b)
        (bit_or
          (left_shift a 1)
          (if (divs? i b) 1 0))))])) "\n"))

assert_is fizzbuzz_functional(100) fizzbuzz_imperative(100) fizzbuzz_weirdo(100)
