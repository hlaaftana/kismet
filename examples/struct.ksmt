static struct: tmpl {
  name: exprs[0]
  props: exprs[1].members
  type_args: collect props [fn prop prop[1]]
  type: subscript_expr [name_expr "Tuple"] [tuple_expr type_args]
  stmts: new_list [+ [* props.size 2] 2]
  add stmts [call_expr (&
    [name_expr "static"]
    [colon_expr name
      [call_expr (& [name_expr "distinct"] type)]])]
  let (each i: range< 0 props.size) {
    prop: props[i].members
    add stmts [call_expr (&
      [name_expr "defn"]
      [call_expr (&
        [name_expr string(".", prop[0])]
        [colon_expr [name_expr "it"] name]
        [call_expr (& [name_expr "returns"] prop[1])])]
      [call_expr (&
        [name_expr "cast"]
        type_args[i]
        [subscript_expr
          [call_expr (&
            ;;[name_expr "cast"]
            ;;type
            [name_expr "undistinct"]
            [name_expr "it"])]
          [number_expr i]])])]
    add stmts [call_expr (&
      [name_expr "defn"]
      [call_expr (&
        [name_expr string(".", prop[0], "=")]
        [colon_expr [name_expr "it"] name]
        [colon_expr [name_expr "val"] type_args[i]]
        [call_expr (& [name_expr "returns"] prop[1])])]
      [colon_expr
        [subscript_expr
          [call_expr (&
            ;;[name_expr "cast"]
            ;;type
            [name_expr "undistinct"]
            [name_expr "it"])] [number_expr i]]
        [name_expr "val"]])]
  }
  add stmts [call_expr (&
    [name_expr "defn"]
    [call_expr (&
      [name_expr string("init", name)]
      [call_expr (& [name_expr "returns"] name)])]
    [call_expr (&
      ;;[name_expr "cast"]
      [name_expr "instantiate"]
      name
      [tuple_expr
        [collect [range 1 props.size] [fn [name_expr "null"]]]])])]
  block_expr stmts
}

struct Person {
  name: String
  age: Int
}

john: initPerson()
john.age: 30
john.name: "John"
assert_is [undistinct john] ("John", 30)
assert_is john.age 30
assert_is john.name "John"
